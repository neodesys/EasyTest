/**
 * EasyTest++
 *
 * Copyright (c) 2015, Lo√Øc Le Page
 *
 * This project is released under the MIT license.
 * See: http://opensource.org/licenses/MIT
 */

#ifndef _I18N_H_
#define _I18N_H_

namespace easyTest
{
	namespace i18n
	{
		enum StringId : unsigned short
		{
			RUNNER_HELP,

			INVALID_ARGS,
			OUT_OF_MEMORY,
			UNKNOWN_TEST_SUITE,
			CANNOT_WRITE_FILE,
			CANNOT_START_RUNNER,

			TIME_UNIT_MIN,
			TIME_UNIT_SEC,
			TIME_UNIT_MS,
			TIME_UNIT_US,
			TIME_UNIT_NS,
			TIME_PREFIX_REAL,
			TIME_PREFIX_PROC,
			TIME_PREFIX_THREAD,
			STATS_NOT_AVAILABLE,

			//WARNING: ASSERT_FAIL_* strings MUST NOT contain invalid JSON
			//characters ["\\b\f\n\r\t]
			ASSERT_FAIL_UNARY,
			ASSERT_FAIL_TRUE,
			ASSERT_FAIL_FALSE,
			ASSERT_FAIL_NAN,
			ASSERT_FAIL_INFINITE,
			ASSERT_FAIL_FINITE,
			ASSERT_FAIL_BINARY,
			ASSERT_FAIL_LT,
			ASSERT_FAIL_LE,
			ASSERT_FAIL_GT,
			ASSERT_FAIL_GE,
			ASSERT_FAIL_EQUAL,
			ASSERT_FAIL_DIFF,
			ASSERT_FAIL_ALMOST_EQ,
			ASSERT_FAIL_VERY_DIFF,
			ASSERT_FAIL_BIT_EQUAL,
			ASSERT_FAIL_BIT_DIFF,
			ASSERT_FAIL_SAME_DATA,
			ASSERT_FAIL_DIFF_DATA,

			//WARNING: RTERROR_* strings MUST NOT contain invalid JSON
			//characters ["\\b\f\n\r\t]
			RTERROR_UNDEFINED,
			RTERROR_UNDEF_CPP_EXCEPT,
			RTERROR_CPP_EXCEPT,
			RTERROR_MEM_NOT_MAPPED,
			RTERROR_MEM_ACCESS_VIOL,
			RTERROR_MEM_BUS_ERROR,
			RTERROR_MEM_MISALIGNMENT,
			RTERROR_INSTR_ERROR,
			RTERROR_INSTR_ILLEGAL,
			RTERROR_INSTR_PRIV,
			RTERROR_INT_DIV_BY_ZERO,
			RTERROR_INT_OVERFLOW,
			RTERROR_FLOAT_ERROR,
			RTERROR_FLOAT_DIV_BY_ZERO,
			RTERROR_FLOAT_OVERFLOW,
			RTERROR_FLOAT_UNDERFLOW,
			RTERROR_FLOAT_BAD_RESULT,
			RTERROR_FLOAT_INVALID_OP,
			RTERROR_ARRAY_OOB,
			RTERROR_SYSTEM_ERROR,
			RTERROR_BROKEN_PIPE,
			RTERROR_FILE_OVER_LIMIT,

			LOG_RUNNER_START,
			LOG_RUNNER_USING_THREADS,
			LOG_RUNNER_FINISH_VERB,
			LOG_RUNNER_FINISH_INTERR,
			LOG_RUNNER_FINISH_INTOK,
			LOG_RUNNER_FINISH_ERR,
			LOG_RUNNER_FINISH_OK,
			LOG_TOTAL_EXEC_TIME,
			LOG_FAILED_SUITE,
			LOG_SUITE_START,
			LOG_SUITE_FINISH_VERB,
			LOG_SUITE_FINISH_INTERR,
			LOG_SUITE_FINISH_INTOK,
			LOG_SUITE_FINISH_ERR,
			LOG_SUITE_FINISH_OK,
			LOG_EXEC_TIME,
			LOG_CASE_START,
			LOG_CASE_FINISH_VERB,
			LOG_CASE_SUCCESS,
			LOG_CASE_FAILURE,
			LOG_CASE_FINISH_ERR,
			LOG_CASE_FINISH_OK,
			LOG_TRACE_HEADER,
			LOG_ASSERT_HEADER,
			LOG_RTERROR_HEADER,

			TAP_RUNNER_START,
			TAP_RUNNER_USING_THREADS,
			TAP_TOTAL_EXEC_TIME,
			TAP_FAILED_SUITE,
			TAP_TRACE_HEADER,
			TAP_ASSERT_HEADER,
			TAP_RTERROR_HEADER,

			NB_STRINGS,

			TIME_UNITS_SEQ = TIME_UNIT_MIN,
			TIME_PREFIXES_SEQ = TIME_PREFIX_REAL
		};

		const char* getString(StringId id);
		const char* const* getSequence(StringId id, unsigned short nbStrings);

		const char* getLang();
		bool setLang(const char* lang);
		bool setLangFromLocale();
		void resetLang();
	}
}

#endif //_I18N_H_
